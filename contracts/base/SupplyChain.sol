pragma solidity >=0.4.24;
// Define a contract 'Supplychain'
contract SupplyChain {

  // Define 'owner'
  address owner;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Produced,  // 0
    ForSale, // 1
    Sold,  // 2
    Shipped,     // 3
    Received,    // 4
    Installed,       // 5
    Checked,    // 6
    Paid,   // 7
    HandedOver // 8
    }

  State constant defaultState = State.Produced;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Supplier, goes on the package, can be verified by the Customer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address supplierID; // Metamask-Ethereum address of the Supplier
    string  supplierName; // Supplier Name
    string  supplierInformation;  // Supplier Information
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address contractorID;  // Metamask-Ethereum address of the Contractor
    string  contractorName; // Contractor Name
    string  contractorInformation; // Contractor Information
    uint    installationPrice; // Price to install the product
    address customerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 9 events with the same 9 state values and accept 'upc' as input argument
  event Produced(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);
  event Shipped(uint upc);
  event Received(uint upc);
  event Installed(uint upc);
  event Checked(uint upc);
  event Accepted(uint upc);
  event Paid(uint upc);
  event HandedOver(uint upc);

  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = items[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_upc].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Produced
  modifier produced(uint _upc) {
    require(items[_upc].itemState == State.Produced);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier forSale(uint _upc) {
    require(items[_upc].itemState == State.ForSale);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Sold
  modifier sold(uint _upc) {
    require(items[_upc].itemState == State.Sold);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Shipped
  modifier shipped(uint _upc) {
    require(items[_upc].itemState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Received
  modifier received(uint _upc) {
    require(items[_upc].itemState == State.Received);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Installed
  modifier installed(uint _upc) {
    require(items[_upc].itemState == State.Installed);
    _;
  }
  
  // Define a modifier that checks if an item.state of a upc is Checked
  modifier checked(uint _upc) {
    require(items[_upc].itemState == State.Checked);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is Paid
  modifier paid(uint _upc) {
    require(items[_upc].itemState == State.Paid);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is HandedOver
  modifier handedOver(uint _upc) {
    require(items[_upc].itemState == State.HandedOver);
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    owner = msg.sender;
    sku = 1;
    upc = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(owner);
    }
  }

  // Define a function 'produceItem' that allows a supplier to mark an item 'Produced'
  function produceItem(uint _upc, address _supplierID, string _supplierName, string _supplierInformation, string  _productNotes) public 
  {
    // Add the new item as part of Produced
    
    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    
  }

  // Define a function 'sellItem' that allows a supplier to mark an item 'ForSale'
  function sellItem(uint _upc, uint _price) public 
  // Call modifier to check if upc has passed previous supply chain stage
  
  // Call modifier to verify caller of this function
  
  {
    // Update the appropriate fields
    
    // Emit the appropriate event
    
  }

  // Define a function 'buyItem' that allows the contractor to mark an item 'Sold'
  // Use the above defined modifiers to check if the item is available for sale, if the buyer has paid enough, 
  // and any excess ether sent is refunded back to the buyer
  function buyItem(uint _upc) public payable 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Call modifer to check if buyer has paid enough
    
    // Call modifer to send any excess ether back to buyer
    
    {
    
    // Update the appropriate fields - ownerID, contractorID, itemState
    
    // Transfer money to supplier
    
    // emit the appropriate event
    
  }

  // Define a function 'shipItem' that allows the supplier to mark an item 'Shipped'
  function shipItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Call modifier to verify caller of this function
    
    {
    // Update the appropriate fields
    
    // Emit the appropriate event
    
  }

  // Define a function 'receiveItem' that allows the contractor to mark an item 'Received'
  function receiveItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields
    
    // Emit the appropriate event
    
  }

  // Define a function 'installItem' that allows the contractor to mark an item 'Installed'
  function intallItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields
    
    // Emit the appropriate event
    
  }

  // Define a function 'checkItem' that allows the contractor to mark an item 'Checked'
  function checkItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields
    
    // Emit the appropriate event
    
  }

  // Define a function 'payItem' that allows the customer to mark an item 'Paid'
  function acceptItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields
    
    // Emit the appropriate event
    
  }

  // Define a function 'handOverItem' that allows the customer to mark an item 'HandedOver'
  function handOverItem(uint _upc) public 
    // Call modifier to check if upc has passed previous supply chain stage
    
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields
    
    // Emit the appropriate event
    
  }

  // Define a function 'fetchItemBufferOne' that fetches the first data entries (max. 9)
  function fetchItemBufferOne(uint _upc) public view returns 
  (
  uint    itemSku,
  uint    itemUpc,
  address ownerID,
  address supplierID,
  string memory supplierName,
  string memory supplierInformation,
  string memory productNotes,
  uint    productPrice
  ) 
  {
  // Assign values to the parameters
  
  return 
  (
  itemSku,
  itemUpc,
  ownerID,
  supplierID,
  supplierName,
  supplierInformation,
  productNotes,
  productPrice
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the rest of the data entries (max. 9)
  function fetchItemBufferTwo(uint _upc) public view returns 
  (
  address contractorID,
  string memory contractorName,
  string memory contractorInformation,
  uint  installationPrice,
  address customerID
  ) 
  {
    // Assign values to the parameters
  
  return 
  (
  contractorID,
  contractorName,
  contractorInformation,
  installationPrice,
  customerID
  );
  }
}
