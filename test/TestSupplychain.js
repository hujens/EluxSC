// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within

// Truffle-assertions npm package for testing events
const truffleAssert = require('truffle-assertions');

// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain');

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1;
    var upc = 1;
    const ownerID = accounts[0];
    const supplierID = accounts[1];
    const supplierName = "Supplier1";
    const supplierInformation = "Address1";
    const productNotes = "Installation material";
    const productPrice = web3.utils.toWei('1', "ether");
    const contractorID = accounts[2];
    const contractorName = "Contractor1";
    const contractorInformation = "Address2";
    const installationPrice = web3.utils.toWei('1', "ether");
    const totalPrice = web3.utils.toWei('2', "ether"); //adding up productPrice and installtionPrice
    const customerID = accounts[3];
    const customerName = "Customer1";
    const emptyAddress = '0x00000000000000000000000000000000000000';

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Supplier: accounts[1] ", accounts[1])
    console.log("Contractor: accounts[2] ", accounts[2])
    console.log("Customer: accounts[3] ", accounts[3])

    // 1st Test
    it("Testing smart contract function produceItem() that allows a supplier to generate an item", async() => {
        const supplyChain = await SupplyChain.deployed()
        // Add all roles (also for following tests)
        await supplyChain.addSupplier(supplierID, {from: ownerID});
        await supplyChain.addContractor(contractorID, {from: ownerID});
        await supplyChain.addCustomer(customerID, {from: ownerID});
        // Mark an item as Produced by calling function produceItem(), watch tx to check event
        let tx = await supplyChain.produceItem(upc, supplierName, supplierInformation, productNotes, {from: supplierID});
        // Retrieve the just now saved item by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc);
        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], supplierID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], supplierID, 'Error: Missing or Invalid supplierID');
        assert.equal(resultBufferOne[4], supplierName, 'Error: Missing or Invalid supplierName');
        assert.equal(resultBufferOne[5], supplierInformation, 'Error: Missing or Invalid supplierInformation');
        assert.equal(resultBufferTwo[0], productNotes, 'Error: Missing or Invalid productNotes');
        assert.equal(resultBufferThree[4], 0, 'Error: Invalid item State');
        // check if event was emitted
        truffleAssert.eventEmitted(tx, 'Produced');
    })

    // 2nd Test
    it("Testing smart contract function sellItem() that allows a supplier to sell a product", async() => {
        const supplyChain = await SupplyChain.deployed();
        // Mark a product as ForSale by calling function sellItem(), watch tx to check event
        let tx = await supplyChain.sellItem(upc, productPrice, {from: supplierID});
        // Retrieve the just now saved item by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc);       
        // Verify the result set
        assert.equal(resultBufferTwo[1], productPrice, 'Error: Invalid productPrice');
        assert.equal(resultBufferThree[4], 1, 'Error: Invalid item State');
        // check if event was emitted
        truffleAssert.eventEmitted(tx, 'ForSale');
    })    

    // 3rd Test
    it("Testing smart contract function buyItem() that allows a contractor to buy an item", async() => {
        const supplyChain = await SupplyChain.deployed()
        // Check balances before transaction
        const balanceOfSupplierBeforeTransaction = await web3.eth.getBalance(supplierID);
        // Mark an item as Sold by calling function buyItem(), watch tx to check event
        let tx = await supplyChain.buyItem(upc, contractorName, contractorInformation, customerID, customerName, {from: contractorID, value: productPrice});     
        // Check balances after transaction
        const balanceOfSupplierAfterTransaction = await web3.eth.getBalance(supplierID);
        const balanceOfContractorAfterTransaction = await web3.eth.getBalance(contractorID);
        // Verify the balances
        let value = Number(balanceOfSupplierAfterTransaction) - Number(balanceOfSupplierBeforeTransaction);
        assert.equal(value, productPrice);
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc);
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo.call(upc);
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc);
        // Verify the result set
        assert.equal(resultBufferOne[2], contractorID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferTwo[1], productPrice, 'Error: Invalid productPrice');
        assert.equal(resultBufferTwo[2], contractorID, 'Error: Invalid contractorID');
        assert.equal(resultBufferTwo[3], contractorName, 'Error: Invalid contractorName');
        assert.equal(resultBufferTwo[4], contractorInformation, 'Error: Invalid contractorInformation');
        assert.equal(resultBufferThree[2], customerID, 'Error: Invalid customerID');
        assert.equal(resultBufferThree[3], customerName, 'Error: Invalid customerName');
        assert.equal(resultBufferThree[4], 2, 'Error: Invalid item State');
        // check if event was emitted
        truffleAssert.eventEmitted(tx, 'Sold');
    })    

    // 4th Test
    it("Testing smart contract function shipItem() that allows a supplier to ship an item", async() => {
        const supplyChain = await SupplyChain.deployed();
        // Mark an item as Shipped by calling function shipItem(), watch tx to check event
        let tx = await supplyChain.shipItem(upc, {from: supplierID});
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc);
        // Verify the result set
        assert.equal(resultBufferThree[4], 3, 'Error: Invalid item State');
        // check if event was emitted
        truffleAssert.eventEmitted(tx, 'Shipped');
    })    

    // 5th Test
    it("Testing smart contract function receiveItem() that allows a contractor to mark an item received", async() => {
        const supplyChain = await SupplyChain.deployed()      
        // Mark an item as Shipped by calling function shipItem(), watch tx to check event;
        let tx = await supplyChain.receiveItem(upc, {from: contractorID});
        // Retrieve the just now saved item from blockchain by calling function fetchItem();
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)
        // Verify the result set;
        assert.equal(resultBufferThree[4], 4, 'Error: Invalid item State')
        // check if event was emitted;
        truffleAssert.eventEmitted(tx, 'Received');
    })    

    // 6th Test
    it("Testing smart contract function intallItem() that allows a contractor to install an item", async() => {
        const supplyChain = await SupplyChain.deployed()
        // Mark an item as Installed by calling function installItem(), watch tx to check event;
        let tx = await supplyChain.installItem(upc, installationPrice, {from: contractorID});
        // Retrieve the just now saved item from blockchain by calling function fetchItem();
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)
        // Verify the result set;
        assert.equal(resultBufferThree[0], installationPrice, 'Error: Invalid installationPrice');
        assert.equal(resultBufferThree[1], totalPrice, 'Error: Invalid totalPrice');
        assert.equal(resultBufferThree[4], 5, 'Error: Invalid item State')
        // check if event was emitted;
        truffleAssert.eventEmitted(tx, 'Installed');
    })

    // 7th Test
    it("Testing smart contract function checkItem() that allows a customer to check an item", async() => {
        const supplyChain = await SupplyChain.deployed()      
        // Declare variables to test both cases of correct and failed installation
        const checkPassed = true;
        const checkFailed = false;
        // Mark an item as checkedFailed by calling function checkItem(), watch tx to check event;
        let tx = await supplyChain.checkItem(upc, checkFailed, {from: customerID});
        // Retrieve the just now saved item from blockchain by calling function fetchItem();
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)
        // Verify the result set;
        assert.equal(resultBufferThree[4], 7, 'Error: Invalid item State')
        // check if event was emitted;
        truffleAssert.eventEmitted(tx, 'CheckFailed');
        // Reinstall item by calling function installItem()
        await supplyChain.installItem(upc, installationPrice, {from: contractorID});
        // Mark an item as checkPassed by calling function checkItem(), watch tx to check event;
        let tx2 = await supplyChain.checkItem(upc, checkPassed, {from: customerID});
        // Retrieve the just now saved item from blockchain by calling function fetchItem();
        const resultBufferThree_2 = await supplyChain.fetchItemBufferThree.call(upc)
        // Verify the result set;
        assert.equal(resultBufferThree_2[4], 6, 'Error: Invalid item State')
        // check if event was emitted;
        truffleAssert.eventEmitted(tx2, 'CheckPassed');
    })

    // 8th Test
    it("Testing smart contract function payItem() that allows a customer to pay the installed item", async() => {
        const supplyChain = await SupplyChain.deployed()
        // Check balances before transaction
        const balanceOfContractorBeforeTransaction = await web3.eth.getBalance(contractorID);
        // Mark an item as Sold by calling function payItem(), watch tx to check event
        let tx = await supplyChain.payItem(upc, {from: customerID, value: totalPrice});     
        // Check balances after transaction
        const balanceOfContractorAfterTransaction = await web3.eth.getBalance(contractorID);
        // Verify the balances
        let value = Number(balanceOfContractorAfterTransaction) - Number(balanceOfContractorBeforeTransaction);
        assert.equal(value, totalPrice);
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc);
        // Verify the result set
        assert.equal(resultBufferThree[4], 8, 'Error: Invalid item State');
        // check if event was emitted
        truffleAssert.eventEmitted(tx, 'Paid');
    })

    // 9th Test
    it("Testing smart contract function handOverItem() that allows a customer to hand over an item", async() => {
        const supplyChain = await SupplyChain.deployed()
        // Mark an item as HandedOver by calling function handOverItem(), watch tx to check event;
        let tx = await supplyChain.handOverItem(upc, {from: customerID});
        // Retrieve the just now saved item from blockchain by calling function fetchItem();
        const resultBufferOne = await supplyChain.fetchItemBufferOne.call(upc)
        const resultBufferThree = await supplyChain.fetchItemBufferThree.call(upc)
        // Verify the result set;
        assert.equal(resultBufferOne[2], customerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferThree[4], 9, 'Error: Invalid item State')
        // check if event was emitted;
        truffleAssert.eventEmitted(tx, 'HandedOver');
    })

    // 10th Test
    it("Testing smart contract function fetchItemBufferOne() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()
        // Retrieve the just now saved item from blockchain by calling function fetchItemBufferOne()
        const resultBufferOne = await supplyChain.fetchItemBufferOne(upc, {from: accounts[4]});
        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU');
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC');
        assert.equal(resultBufferOne[2], customerID, 'Error: Missing or Invalid ownerID');
        assert.equal(resultBufferOne[3], supplierID, 'Error: Missing or Invalid supplierID');
        assert.equal(resultBufferOne[4], supplierName, 'Error: Missing or Invalid supplierName');
        assert.equal(resultBufferOne[5], supplierInformation, 'Error: Missing or Invalid supplierInformation');
    })

    // 11th Test
    it("Testing smart contract function fetchItemBufferTwo() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()
        // Retrieve the just now saved item from blockchain by calling function fetchItemBufferOne()
        const resultBufferTwo = await supplyChain.fetchItemBufferTwo(upc, {from: accounts[4]});
        // Verify the result set:
        assert.equal(resultBufferTwo[0], productNotes, 'Error: Missing or Invalid productNotes');
        assert.equal(resultBufferTwo[1], productPrice, 'Error: Invalid productPrice');
        assert.equal(resultBufferTwo[2], contractorID, 'Error: Invalid contractorID');
        assert.equal(resultBufferTwo[3], contractorName, 'Error: Invalid contractorName');
        assert.equal(resultBufferTwo[4], contractorInformation, 'Error: Invalid contractorInformation');
    })

    // 12th Test
    it("Testing smart contract function fetchItemBufferThree() that allows anyone to fetch item details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()
        // Retrieve the just now saved item from blockchain by calling function fetchItemBufferThree()
        const resultBufferThree = await supplyChain.fetchItemBufferThree(upc, {from: accounts[4]});
        // Verify the result set:
        assert.equal(resultBufferThree[0], installationPrice, 'Error: Invalid installationPrice');
        assert.equal(resultBufferThree[1], totalPrice, 'Error: Invalid totalPrice');
        assert.equal(resultBufferThree[2], customerID, 'Error: Invalid customerID');
        assert.equal(resultBufferThree[3], customerName, 'Error: Invalid customerName');
        assert.equal(resultBufferThree[4], 9, 'Error: Invalid item State')
    })
});